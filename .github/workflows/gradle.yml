name: Java CI with Gradle (Groovy)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle
      - name: 'Check Java Version'
        run: |
          java --version
      - name: 'Assemble JAR'
        run: |
          ./gradlew assemble
      - name: 'Get Version Number'
        run: |
          echo "VERSION=$(./gradlew properties -q | grep "version:" |
          awk '{print $2}')" >> $GITHUB_ENV
      - name: 'Publish JAR'
        uses: actions/upload-artifact@v3.1.1
        with:
          name: 'cicd-demo-${{env.VERSION}}-all.jar'
          path: build/libs/*-all.jar

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1.0.4
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.2.0
        with:
          arguments: build
      - uses: actions/upload-artifact@v3.1.0
        with:
          name: Build Artifacts
          path: |
            **/build/reports
      - name: 'Write Config & Key Files'
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >>
          ~/.oci/config
          echo "pass_phrase=${{secrets.OCI_PASSPHRASE}}" >>
          ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >>
          ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
          echo "${{secrets.VM_SSH_PUB_KEY}}" >> /home/runner/.oci/
          id_vm.pub
      - name: 'Install OCI CLI'
        run: |
          curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | bash
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/.local/bin" >> $GITHUB_PATH
          exec -l $SHELL

      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem

      - name: 'Check Existing Instances'
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance list \
            --lifecycle-state RUNNING \
            --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
            --display-name cicd-demo \
            --query "data [0].id" \
            --raw-output \
          )" >> $GITHUB_ENV

      - name: 'Create Instance'
        if: ${{ env.INSTANCE_OCID == '' }}
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance launch \
            --availability-domain ${{secrets.VM_AVAILABILITY_DOMAIN}} \
            --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
            --display-name cicd-demo \
            --image-id ${{secrets.VM_IMAGE_OCID}} \
            --shape ${{secrets.VM_SHAPE}} \
            --subnet-id ${{secrets.VM_SUBNET_OCID}} \
            --ssh-authorized-keys-file /home/runner/.oci/id_vm.pub \
            --query "data.id" \
            --raw-output \
          )" >> $GITHUB_ENV

      - name: 'Get Instance IP'
        run: |
          echo "INSTANCE_IP=$( \
          oci compute instance list-vnics \
          --instance-id ${{env.INSTANCE_OCID}} \
          --query "data [0].public-ip" \
          --raw-output \
          )" >> $GITHUB_ENV

      - name: 'Wait for SSH'
        run: |
          while ! nc -z ${{env.INSTANCE_IP}} 22; do
            sleep 5
          echo "Waiting for SSH..."
          done; echo "SSH is up!"

      - name: 'Copy JAR to Instance'
        run: |
          scp -o StrictHostKeyChecking=no -i /home/runner/.oci/key.pem build/libs/*-all.jar opc@${{env.INSTANCE_IP}}:/home/opc/cicd-demo.jar

      - name: 'Run JAR on Instance'
        run: |
          ssh -o StrictHostKeyChecking=no -i /home/runner/.oci/key.pem opc@${{env.INSTANCE_IP}} "java -jar cicd-demo.jar"


      - name: 'Stop App'
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.INSTANCE_IP}}
          username: opc
          key: ${{secrets.VM_SSH_PRIVATE_KEY}}
          script: |
            pid=`ps aux | grep "[c]icd-demo.jar" | awk '{print $2}'`
            if [ "$pid" == "" ]; then
              echo "Process not found"
            else
              kill -9 $pid
            fi
            sudo mkdir -p /app

      - name: 'Push JAR'
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: opc
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          source: "build/libs/cicd-demo-${{env.VERSION}}-all.jar"
          target: "app"
          strip_components: 2

      - name: 'Start App'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: opc
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            sudo mv ~/app/cicd-demo-${{env.VERSION}}-all.jar /app/
            cicd-demo.jar
            nohup java -jar /app/cicd-demo.jar > output.$
            (date --iso).log 2>&1 &
            echo "App started"


